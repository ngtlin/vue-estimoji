import { __extends } from "tslib";
import DomElement from "../DomElement";
import { searchAndInitialize } from "../Utils";
import { removeAllChildren, tryGetData, isColor } from "./ChartFunctions";
import anime from "animejs";
var QUERY_CHART = ".js-chart";
var QUERY_LEGEND = ".js-legend";
var DASH_SEPARATOR_WIDTH = 3;
var ANIMATION_DURATION = 1500;
var ANIMATION_DURATION_LEGEND = 500;
var QUERY_META_TITLE = ".meta .title";
var QUERY_META_SUBTITLE = ".meta .subtitle";
/**
 * Pie Chart Component.
 */
var PieChart = /** @class */ (function (_super) {
    __extends(PieChart, _super);
    /**
     * Creates and initializes the Pie Chart component.
     * @param {DomElement} - root element of the chart.
     * @param {Array} - pie chart data definitions.
     */
    function PieChart(element, data) {
        var _this = _super.call(this, element) || this;
        if (data) {
            _this._data = data;
        }
        _this._initialize();
        return _this;
    }
    PieChart.prototype._initialize = function () {
        this._chart = this.element.querySelector(QUERY_CHART);
        this._legend = this.element.querySelector(QUERY_LEGEND);
        this._title = this.element.querySelector(QUERY_META_TITLE);
        this._subtitle = this.element.querySelector(QUERY_META_SUBTITLE);
        this._unit = this.getAttribute("data-unit") || "";
        this._alwaysShowLegend = this.element.hasAttribute("data-always-show-legend");
        if (!this._data) {
            this._data = tryGetData(this.element);
        }
        this._render();
    };
    PieChart.prototype._render = function () {
        var total = this._data.reduce(function (a, b) { return a + b.value; }, 0);
        var r = 16;
        var dashTotal = (2 * r * Math.PI);
        var currentRotate = 9;
        // Cleanup
        removeAllChildren(this._chart);
        if (this._legend) {
            removeAllChildren(this._legend);
        }
        var percentageAdjustTotal = 0;
        var percentageAdjust = 0;
        var separatorPercentage = DASH_SEPARATOR_WIDTH / 100;
        for (var i = 0; i < this._data.length; i++) {
            var entry = this._data[i];
            var percentage = entry.value / total;
            if (percentage < separatorPercentage) {
                percentageAdjustTotal += (separatorPercentage - percentage);
                percentageAdjust++;
            }
        }
        if (percentageAdjust > 0) {
            percentageAdjust = percentageAdjustTotal / (this._data.length - percentageAdjust);
        }
        var animations = anime.timeline();
        var animationOffset = 0;
        var _loop_1 = function (i) {
            var entry = this_1._data[i];
            var displayPercentage = entry.value / total;
            var percentage = Math.max(separatorPercentage, displayPercentage - percentageAdjust);
            var dashWidth = (percentage * dashTotal) - DASH_SEPARATOR_WIDTH;
            var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
            svg.setAttribute("viewBox", "0 0 34 34");
            svg.setAttribute("role", "img");
            svg.setAttribute("aria-labelledby", "title desc");
            var title = document.createElementNS("http://www.w3.org/2000/svg", "title");
            title.setAttribute("id", "title");
            title.innerHTML = "Pie chart segment " + Math.floor(displayPercentage * 100) + "%";
            var description = document.createElementNS("http://www.w3.org/2000/svg", "desc");
            description.setAttribute("id", "desc");
            description.innerHTML = entry.title + ": " + entry.value;
            var circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
            circle.setAttribute("cx", "17");
            circle.setAttribute("cy", "17");
            circle.setAttribute("r", String(r));
            if (isColor(entry.color) === true) {
                circle.setAttribute("stroke", "" + entry.color);
            }
            else {
                circle.setAttribute("class", entry.color);
            }
            circle.setAttribute("role", "presentation");
            svg.setAttribute("style", "transform: rotate(" + currentRotate + "deg);");
            svg.appendChild(title);
            svg.appendChild(description);
            svg.appendChild(circle);
            this_1._chart.appendChild(svg);
            var animationDuration = ANIMATION_DURATION * percentage;
            circle.style.display = "none";
            var counter = { var: 0.5 };
            animations.add({
                targets: counter,
                var: dashWidth,
                begin: function () {
                    circle.style.display = "";
                },
                update: function () {
                    circle.setAttribute("stroke-dasharray", counter.var + " " + dashTotal);
                },
                duration: animationDuration,
                easing: "easeInQuint"
            });
            // Legend
            if (this_1._legend && (this_1._data.length > 1) || this_1._alwaysShowLegend) {
                var bullet = new DomElement("span")
                    .addClass("bullet");
                if (isColor(entry.color) === true) {
                    bullet.setAttribute("style", "background-color: " + entry.color);
                }
                else {
                    bullet.addClass(entry.color);
                }
                var caption = new DomElement("span");
                var captionElement = caption.element;
                captionElement.innerText = entry.title;
                var legendItem = new DomElement("li")
                    .appendChild(bullet)
                    .appendChild(caption);
                this_1._legend.appendChild(legendItem.element);
                this_1._animateLegend(legendItem.element, animationOffset);
            }
            animationOffset += animationDuration;
            currentRotate += (360 * percentage);
            if (i === this_1._data.length - 1) {
                this_1._title.innerHTML = entry.value + " " + this_1._unit;
                this_1._subtitle.innerHTML = entry.title;
            }
        };
        var this_1 = this;
        for (var i = 0; i < this._data.length; i++) {
            _loop_1(i);
        }
    };
    PieChart.prototype._animateLegend = function (legendItem, animationOffset) {
        legendItem.style.opacity = "0";
        anime({
            targets: legendItem,
            duration: ANIMATION_DURATION_LEGEND,
            opacity: 1,
            easing: "easeInOutQuint",
            delay: animationOffset,
            complete: function () {
                legendItem.style.removeProperty("opacity");
            }
        });
    };
    /**
     * Updates the pie chart with the specified data definitions.
     * @param {Array} - pie chart data definitions.
     */
    PieChart.prototype.update = function (data) {
        if (data) {
            this._data = data;
        }
        this._render();
    };
    /**
     * Removes all event handlers and clears references.
     */
    PieChart.prototype.destroy = function () {
        this._data = undefined;
        this._title = undefined;
        this._subtitle = undefined;
        this._unit = undefined;
        removeAllChildren(this._chart);
        this._chart = undefined;
        if (this._legend) {
            removeAllChildren(this._legend);
            this._legend = undefined;
        }
    };
    /**
     * @deprecated use destroy() instead.
     * @todo remove in version 2.0.0
     */
    PieChart.prototype.destory = function () {
        this.destroy();
    };
    return PieChart;
}(DomElement));
export function init() {
    searchAndInitialize(".pie-chart", function (e) {
        new PieChart(e);
    });
}
export default PieChart;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
