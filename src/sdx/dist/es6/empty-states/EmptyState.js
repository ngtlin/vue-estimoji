import { __extends, __values } from "tslib";
import { searchAndInitialize } from "../Utils";
import DomElement from "../DomElement";
import { parentWithClass, getRootElement } from "../DomFunctions";
var CLASS_BORDER = "empty-state__border";
var CLASS_BORDER_MODAL = "empty-state__border--modal";
var CLASS_ACTIVE = "is-active";
var CLASS_HASFILES = "has-files";
var CLASS_MODAL = "empty-state--modal";
var CLASS_MODAL_CONTENT = "modal__content";
var QUERY_MODAL_BODY = ".modal__body";
var QUERY_FILE = "input[type='file']";
/**
 * Empty state pattern
 */
var EmptyState = /** @class */ (function (_super) {
    __extends(EmptyState, _super);
    /**
     * Creates and initializes the Empty-State pattern component.
     * @param {DomElement} - root element of the empty-state pattern.
     */
    function EmptyState(element) {
        var _this = _super.call(this, element) || this;
        _this._fileInput = _this.element.querySelector(QUERY_FILE);
        _this._button = _this.element.querySelector("label");
        _this._fileChangedHandler = _this._handleFileChanged.bind(_this);
        _this._preventEventsHandler = _this._preventDragEvents.bind(_this);
        _this._dragEnterHandler = _this._handleDragEnter.bind(_this);
        _this._dragLeaveHandler = _this._handleDragLeave.bind(_this);
        _this._dropHandler = _this._handleDrop.bind(_this);
        _this._isDragging = false;
        _this._initialize();
        return _this;
    }
    EmptyState.prototype._initialize = function () {
        var e_1, _a;
        if (this.hasClass(CLASS_MODAL)) {
            // handle modal dialogs
            this._dragArea = parentWithClass(this.element, CLASS_MODAL_CONTENT);
            var borderArea = this._dragArea.querySelector(QUERY_MODAL_BODY);
            borderArea.setAttribute("style", "pointer-events: none;");
            this._border = new DomElement("div")
                .addClass(CLASS_BORDER)
                .addClass(CLASS_BORDER_MODAL);
            borderArea.appendChild(this._border.element);
        }
        else {
            // normal modal dialog
            this._dragArea = this.element;
            var borderArea = getRootElement();
            this._border = new DomElement("div")
                .addClass(CLASS_BORDER);
            if (!borderArea.querySelector("." + CLASS_BORDER)) {
                borderArea.appendChild(this._border.element);
            }
        }
        var form = this.element.querySelector("form");
        try {
            for (var _b = __values(["drag", "dragstart", "dragend", "dragover", "dragenter", "dragleave", "drop"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                var event_1 = _c.value;
                this.element.addEventListener(event_1, this._preventEventsHandler);
                form.addEventListener(event_1, this._preventEventsHandler);
                this._dragArea.addEventListener(event_1, this._preventEventsHandler);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this._dragArea.addEventListener("dragover", this._dragEnterHandler);
        this._dragArea.addEventListener("dragenter", this._dragEnterHandler);
        this._dragArea.addEventListener("dragleave", this._dragLeaveHandler);
        this._dragArea.addEventListener("dragend", this._dragLeaveHandler);
        this._dragArea.addEventListener("drop", this._dragLeaveHandler);
        this._dragArea.addEventListener("drop", this._dropHandler);
        this._fileInput.addEventListener("change", this._fileChangedHandler);
    };
    EmptyState.prototype._preventDragEvents = function (e) {
        e.preventDefault();
        e.stopPropagation();
        return false;
    };
    EmptyState.prototype._handleDragEnter = function () {
        if (this._isDragging === true) {
            return;
        }
        this._isDragging = true;
        this._button.setAttribute("style", "pointer-events: none;");
        this.addClass(CLASS_ACTIVE);
        this._border.addClass(CLASS_ACTIVE);
    };
    EmptyState.prototype._handleDragLeave = function () {
        if (this._isDragging === false) {
            return;
        }
        this._isDragging = false;
        this._button.setAttribute("style", "");
        this.removeClass(CLASS_ACTIVE);
        this._border.removeClass(CLASS_ACTIVE);
    };
    EmptyState.prototype._handleDrop = function (e) {
        var dragEvent = e;
        this._fileInput.files = dragEvent.dataTransfer.files;
    };
    EmptyState.prototype._handleFileChanged = function () {
        var files = this._fileInput.files;
        if (files && files.length > 0) {
            this.addClass(CLASS_HASFILES);
        }
        else {
            this.removeClass(CLASS_HASFILES);
        }
    };
    Object.defineProperty(EmptyState.prototype, "files", {
        /**
         * Gets the currently selected files.
         */
        get: function () {
            return this._fileInput.files;
        },
        enumerable: false,
        configurable: true
    });
    return EmptyState;
}(DomElement));
export function init() {
    searchAndInitialize(".empty-state", function (e) {
        new EmptyState(e);
    });
}
export default EmptyState;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
